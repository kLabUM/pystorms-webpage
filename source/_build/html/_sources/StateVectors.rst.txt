Defining States
===============

.. code:: python

   import benchmarking
   import numpy as np
   import matplotlib.pyplot as plt

In scenario gamma, states are defined as the depths in the ponds. If
needed custom states can be defined by the users, overwriting or
appending to the default states provided in the library.

.. code:: python

   env = benchmarking.scenarios.gamma()

States defined in gamma scenario can be queried as follows,

.. code:: python

   env.config["states"]

::

   [('1', 'depthN'),
    ('2', 'depthN'),
    ('3', 'depthN'),
    ('4', 'depthN'),
    ('5', 'depthN'),
    ('6', 'depthN'),
    ('7', 'depthN'),
    ('8', 'depthN'),
    ('9', 'depthN'),
    ('10', 'depthN'),
    ('11', 'depthN')]

Appending the state list with the new state choice would update the
state vector returned by the ``env.state()`` function.

For example, consider the case when we want to add outflow from the 4th
basin to the state.

.. code:: python

   env.config["states"].append(("O4", "flow"))

.. code:: python

   env.config["states"]

::

   [('1', 'depthN'),
    ('2', 'depthN'),
    ('3', 'depthN'),
    ('4', 'depthN'),
    ('5', 'depthN'),
    ('6', 'depthN'),
    ('7', 'depthN'),
    ('8', 'depthN'),
    ('9', 'depthN'),
    ('10', 'depthN'),
    ('11', 'depthN'),
    ('O4', 'flow')]

When we run the simulation, ``env.state()`` function should return a
vector of length 12.

.. code:: python

   done = False
   while not done:
       state = env.state()
       done = env.step(np.ones(11))

.. code:: python

   len(state)

::

   12

Users are not limited to the flows in the network. They are allowed to
access any value computed by the swmm network.

Supported state queries: \* ``depthN`` : Depth in nodes \* ``depthL`` :
Depth in links \* ``flow`` : Flow in links/orifices/weir \* ``flooding``
: Flooding in nodes \* ``pollutantN`` : Pollutant in nodes \*
``pollutantL`` : Pollutant in links
